/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.5 */

#ifndef PB_TRANSACTION_PB_H_INCLUDED
#define PB_TRANSACTION_PB_H_INCLUDED
#include <pb.h>
#include "product.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _TransactionMessage_PaymentMethod { 
    TransactionMessage_PaymentMethod_CASH = 0, 
    TransactionMessage_PaymentMethod_BON = 1, 
    TransactionMessage_PaymentMethod_SUM_UP = 2, 
    TransactionMessage_PaymentMethod_VOUCHER = 3, 
    TransactionMessage_PaymentMethod_FREE_CREW = 4, 
    TransactionMessage_PaymentMethod_FREE_BAND = 5, 
    TransactionMessage_PaymentMethod_KULT_CARD = 6 
} TransactionMessage_PaymentMethod;

typedef enum _TransactionMessage_TransactionType { 
    TransactionMessage_TransactionType_TOP_UP = 0, 
    TransactionMessage_TransactionType_CHARGE = 1, 
    TransactionMessage_TransactionType_CASHOUT = 2 
} TransactionMessage_TransactionType;

/* Struct definitions */
typedef struct _TransactionMessage_CartItem { 
    int32_t amount; 
    bool has_product;
    Product product; 
} TransactionMessage_CartItem;

typedef struct _TransactionMessage { 
    char device_id[9]; 
    char client_transaction_id[9]; 
    TransactionMessage_TransactionType transaction_type; 
    int32_t device_time; 
    TransactionMessage_PaymentMethod payment_method; 
    int32_t deposit; 
    int32_t total; 
    pb_size_t which__card_id;
    union {
        char card_id[9];
    } _card_id; 
    pb_size_t which__list_id;
    union {
        int32_t list_id;
    } _list_id; 
    pb_size_t cart_items_count;
    TransactionMessage_CartItem cart_items[9]; 
} TransactionMessage;


/* Helper constants for enums */
#define _TransactionMessage_PaymentMethod_MIN TransactionMessage_PaymentMethod_CASH
#define _TransactionMessage_PaymentMethod_MAX TransactionMessage_PaymentMethod_KULT_CARD
#define _TransactionMessage_PaymentMethod_ARRAYSIZE ((TransactionMessage_PaymentMethod)(TransactionMessage_PaymentMethod_KULT_CARD+1))

#define _TransactionMessage_TransactionType_MIN TransactionMessage_TransactionType_TOP_UP
#define _TransactionMessage_TransactionType_MAX TransactionMessage_TransactionType_CASHOUT
#define _TransactionMessage_TransactionType_ARRAYSIZE ((TransactionMessage_TransactionType)(TransactionMessage_TransactionType_CASHOUT+1))


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define TransactionMessage_init_default          {"", "", _TransactionMessage_TransactionType_MIN, 0, _TransactionMessage_PaymentMethod_MIN, 0, 0, 0, {""}, 0, {0}, 0, {TransactionMessage_CartItem_init_default, TransactionMessage_CartItem_init_default, TransactionMessage_CartItem_init_default, TransactionMessage_CartItem_init_default, TransactionMessage_CartItem_init_default, TransactionMessage_CartItem_init_default, TransactionMessage_CartItem_init_default, TransactionMessage_CartItem_init_default, TransactionMessage_CartItem_init_default}}
#define TransactionMessage_CartItem_init_default {0, false, Product_init_default}
#define TransactionMessage_init_zero             {"", "", _TransactionMessage_TransactionType_MIN, 0, _TransactionMessage_PaymentMethod_MIN, 0, 0, 0, {""}, 0, {0}, 0, {TransactionMessage_CartItem_init_zero, TransactionMessage_CartItem_init_zero, TransactionMessage_CartItem_init_zero, TransactionMessage_CartItem_init_zero, TransactionMessage_CartItem_init_zero, TransactionMessage_CartItem_init_zero, TransactionMessage_CartItem_init_zero, TransactionMessage_CartItem_init_zero, TransactionMessage_CartItem_init_zero}}
#define TransactionMessage_CartItem_init_zero    {0, false, Product_init_zero}

/* Field tags (for use in manual encoding/decoding) */
#define TransactionMessage_CartItem_amount_tag   1
#define TransactionMessage_CartItem_product_tag  2
#define TransactionMessage_device_id_tag         1
#define TransactionMessage_client_transaction_id_tag 2
#define TransactionMessage_transaction_type_tag  3
#define TransactionMessage_device_time_tag       4
#define TransactionMessage_payment_method_tag    5
#define TransactionMessage_deposit_tag           6
#define TransactionMessage_total_tag             7
#define TransactionMessage_card_id_tag           8
#define TransactionMessage_list_id_tag           9
#define TransactionMessage_cart_items_tag        10

/* Struct field encoding specification for nanopb */
#define TransactionMessage_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, STRING,   device_id,         1) \
X(a, STATIC,   SINGULAR, STRING,   client_transaction_id,   2) \
X(a, STATIC,   SINGULAR, UENUM,    transaction_type,   3) \
X(a, STATIC,   SINGULAR, INT32,    device_time,       4) \
X(a, STATIC,   SINGULAR, UENUM,    payment_method,    5) \
X(a, STATIC,   SINGULAR, SINT32,   deposit,           6) \
X(a, STATIC,   SINGULAR, SINT32,   total,             7) \
X(a, STATIC,   ONEOF,    STRING,   (_card_id,card_id,_card_id.card_id),   8) \
X(a, STATIC,   ONEOF,    INT32,    (_list_id,list_id,_list_id.list_id),   9) \
X(a, STATIC,   REPEATED, MESSAGE,  cart_items,       10)
#define TransactionMessage_CALLBACK NULL
#define TransactionMessage_DEFAULT NULL
#define TransactionMessage_cart_items_MSGTYPE TransactionMessage_CartItem

#define TransactionMessage_CartItem_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    amount,            1) \
X(a, STATIC,   OPTIONAL, MESSAGE,  product,           2)
#define TransactionMessage_CartItem_CALLBACK NULL
#define TransactionMessage_CartItem_DEFAULT NULL
#define TransactionMessage_CartItem_product_MSGTYPE Product

extern const pb_msgdesc_t TransactionMessage_msg;
extern const pb_msgdesc_t TransactionMessage_CartItem_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define TransactionMessage_fields &TransactionMessage_msg
#define TransactionMessage_CartItem_fields &TransactionMessage_CartItem_msg

/* Maximum encoded size of messages (where known) */
#if defined(Product_size)
#define TransactionMessage_CartItem_size         (17 + Product_size)
#define TransactionMessage_size                  (275 + 9*Product_size)
#endif

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
