/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.7 */

#ifndef PB_CONFIGS_PB_H_INCLUDED
#define PB_CONFIGS_PB_H_INCLUDED
#include <pb.h>
#include "config.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef PB_BYTES_ARRAY_T(10) AllLists_privilege_tokens_t;
typedef struct _AllLists {
  pb_callback_t product_list;
  int32_t checksum;
  int32_t version_number;
  int32_t timestamp;
  pb_size_t privilege_tokens_count;
  AllLists_privilege_tokens_t privilege_tokens[30];
} AllLists;

#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define AllLists_init_default                                                                   \
  {                                                                                             \
    {{NULL}, NULL}, 0, 0, 0, 0, {                                                               \
      {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}, \
          {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}},       \
          {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}},       \
          {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}, {                                             \
        0, {                                                                                    \
          0                                                                                     \
        }                                                                                       \
      }                                                                                         \
    }                                                                                           \
  }
#define AllLists_init_zero                                                                      \
  {                                                                                             \
    {{NULL}, NULL}, 0, 0, 0, 0, {                                                               \
      {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}, \
          {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}},       \
          {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}},       \
          {0, {0}}, {0, {0}}, {0, {0}}, {0, {0}}, {                                             \
        0, {                                                                                    \
          0                                                                                     \
        }                                                                                       \
      }                                                                                         \
    }                                                                                           \
  }

/* Field tags (for use in manual encoding/decoding) */
#define AllLists_product_list_tag 1
#define AllLists_checksum_tag 2
#define AllLists_version_number_tag 3
#define AllLists_timestamp_tag 4
#define AllLists_privilege_tokens_tag 5

/* Struct field encoding specification for nanopb */
#define AllLists_FIELDLIST(X, a)                     \
  X(a, CALLBACK, REPEATED, MESSAGE, product_list, 1) \
  X(a, STATIC, SINGULAR, INT32, checksum, 2)         \
  X(a, STATIC, SINGULAR, INT32, version_number, 3)   \
  X(a, STATIC, SINGULAR, INT32, timestamp, 4)        \
  X(a, STATIC, REPEATED, BYTES, privilege_tokens, 5)
#define AllLists_CALLBACK pb_default_field_callback
#define AllLists_DEFAULT NULL
#define AllLists_product_list_MSGTYPE DeviceConfig

extern const pb_msgdesc_t AllLists_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define AllLists_fields &AllLists_msg

/* Maximum encoded size of messages (where known) */
/* AllLists_size depends on runtime parameters */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
